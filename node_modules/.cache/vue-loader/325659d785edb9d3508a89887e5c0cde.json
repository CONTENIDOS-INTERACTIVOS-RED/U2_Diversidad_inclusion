{"remainingRequest":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/src/views/curso/Tema3.vue?vue&type=template&id=c8c9c454&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/src/views/curso/Tema3.vue","mtime":1736992474121},{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diversidad_inclusion/U2_Diversidad_inclusion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}